plugins {
    id 'dev.architectury.loom' version '1.6-SNAPSHOT' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
    id "me.modmuss50.mod-publish-plugin" version "0.5.1"
}

tasks.register("multiplatformDatagen") {
    Project common = project(":common")
    Project fabric = project(":fabric")
    Project forge = project(":forge")
    dependsOn project(":fabric").tasks.named("runDatagen")
    // Copy the fabric only recipes to the generated resources
    File fabricDir = fabric.file("src/main/generated/data/doaddoncreate/recipes/")
    File forgeDir = forge.file("src/main/generated/data/doaddoncreate/recipes/")

    delete(fabricDir)
    delete(forgeDir)

    copy {
        from common.file("src/main/generated/data/doaddoncreate/recipes/.fabric")
        include "**/*.json"
        into fabric.file("src/main/generated/data/doaddoncreate/recipes/")
    }
    // Copy the forge only recipes to the generated resources
    copy {
        from common.file("src/main/generated/data/doaddoncreate/recipes/.forge")
        include "**/*.json"
        into forge.file("src/main/generated/data/doaddoncreate/recipes/")
    }
}

architectury {
    minecraft = project.minecraft_version
}

allprojects {
    group = rootProject.maven_group
    version = rootProject.mod_version
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'

    base {
        // Set up a suffixed format for the mod jar names, e.g. `example-fabric`.
        archivesName = "$rootProject.archives_name-$project.name"
    }

    repositories {
        mavenCentral()
        maven { name = "Resourceful Maven"; description = "Botarium & ResourcefulLib"; url = "https://maven.teamresourceful.com/repository/maven-public/" }
        maven { name = "Devos Maven"; description = "Create Fabric, Porting Lib, Forge Tags, Milk Lib & Fabric Registrate"; url = "https://mvn.devos.one/snapshots/" }
        maven { name = "Curseforge Maven"; description = "Forge Config API Port"; url = "https://cursemaven.com" }
        maven { name = "JamiesWhiteShirt Maven"; description = "Reach Entity Attributes"; url = "https://maven.jamieswhiteshirt.com/libs-release" }
        maven { name = "Tterrag Maven"; description = "Create, Forge Registrate & Forge Flywheel"; url = "https://maven.tterrag.com" }
        exclusiveContent {
            forRepository {
                maven {
                    name = "Modrinth"
                    url = "https://api.modrinth.com/maven"
                }
            }
            filter {
                includeGroup "maven.modrinth"
            }
        }
        maven { name = "Jitpack maven"; description = "Mixin Extras & Fabric ASM"; url = "https://jitpack.io/" } //NOTE: LEAVE THIS AS LAST
    }

    dependencies {
        minecraft "net.minecraft:minecraft:$rootProject.minecraft_version"
        mappings loom.officialMojangMappings()

        include(implementation("org.reflections:reflections:0.10.2"))

        modApi("com.teamresourceful.resourcefullib:resourcefullib-${project.name}-${rootProject.minecraft_version}:${rootProject.resourcefullib_version}")
        modApi("earth.terrarium.botarium:botarium-${project.name}-${rootProject.minecraft_version}:${rootProject.botarium_version}")

        modCompileOnly("maven.modrinth:lets-do-meadow:${rootProject.meadow_version}")
        modCompileOnly("maven.modrinth:lets-do-vinery:${rootProject.vinery_version}")
        modCompileOnly("maven.modrinth:lets-do-brewery:${rootProject.brewery_version}")
        modCompileOnly("maven.modrinth:do-api:${rootProject.doapi_version}-fabric")
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 17
    }

    // Configure Maven publishing.
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = base.archivesName.get()
                from components.java
            }
        }

        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
        repositories {
            // Add repositories to publish to here.
            // Notice: This block does NOT have the same function as the block in the top level.
            // The repositories here will be used for publishing your artifact, not for
            // retrieving dependencies.
        }
    }
}


publishMods {
    changelog = file("CHANGELOG.md").text.replace("@VERSION@", rootProject.mod_version)
    type = STABLE

    def optionsCurseforge = curseforgeOptions {
        accessToken = providers.environmentVariable("CURSEFORGE_API_KEY")
        minecraftVersions.add("1.20.1")
        projectId = "1025920"
        requires {
            slug = "botarium"
        }
        requires {
            slug = "resourceful-lib"
        }
        optional {
            slug = "lets-do-bakery"
        }
        optional {
            slug = "lets-do-herbal-brews"
        }
        optional {
            slug = "lets-do-vinery"
        }
        optional {
            slug = "lets-do-nethervinery"
        }
        optional {
            slug = "lets-do-meadow"
        }
    }

    def optionsModrinth = modrinthOptions {
        accessToken = providers.environmentVariable("MODRINTH_API_KEY")
        projectId = "PGVF51co"
        minecraftVersions.add("1.20.1")
        requires {
            slug = "botarium"
        }
        requires {
            slug = "resourceful-lib"
        }
        optional {
            slug = "lets-do-bakery"
        }
        optional {
            slug = "lets-do-herbalbrews"
        }
        optional {
            slug = "lets-do-vinery"
        }
        optional {
            slug = "lets-do-nethervinery"
        }
        optional {
            slug = "lets-do-meadow"
        }
    }

    curseforge("curseforgeFabric") {
        from optionsCurseforge
        modLoaders.add("fabric")
        modLoaders.add("quilt")
        file = project(":fabric").tasks.named("remapJar").get().archiveFile
        displayName = "[Let's Do Addon] Fluids ${rootProject.mod_version} Fabric"
        version = "${rootProject.mod_version}-fabric"
        optional {
            slug = "create-fabric"
        }
    }

    curseforge("curseforgeForge") {
        from optionsCurseforge
        modLoaders.add("forge")
        modLoaders.add("neoforge")
        file = project(":forge").tasks.named("remapJar").get().archiveFile
        displayName = "[Let's Do Addon] Fluids ${rootProject.mod_version} Forge"
        version = "${rootProject.mod_version}-forge"
        optional {
            slug = "create"
        }
    }

    modrinth("modrinthFabric") {
        from optionsModrinth
        modLoaders.add("fabric")
        modLoaders.add("quilt")
        file = project(":fabric").tasks.named("remapJar").get().archiveFile
        displayName = "[Let's Do Addon] Fluids ${rootProject.mod_version} Fabric"
        version = "${rootProject.mod_version}-fabric"
        optional {
            slug = "create-fabric"
        }
    }

    modrinth("modrinthForge") {
        from optionsModrinth
        modLoaders.add("forge")
        modLoaders.add("neoforge")
        file = project(":forge").tasks.named("remapJar").get().archiveFile
        displayName = "[Let's Do Addon] Fluids ${rootProject.mod_version} Forge"
        version = "${rootProject.mod_version}-forge"
        optional {
            slug = "create"
        }
    }
}
